var fs = require('fs');
var utils = require('./utils');
var async = require('async');
var path = require('path');
/**
 * Variables
 */
var viewsPath = './app/views/';
var lessPath = './public/stylesheets/';
var javaScriptPath = './public/javascripts/';
var layoutsPath = viewsPath + 'layouts';
var pagesPath = viewsPath + 'pages';
var bodyRegexp = /body/g;
var accessEntitys = ['controller','directive','filter','service'];
var actionRegExp = [{regexp:/(^|\s)(\w+[()\w-"';,=]+)(\.|#)(\w+)($|\s)/g,func:'className'},{regexp:/include !(.*)/g,func:'include'},
{regexp:/(ng-controller)=("|')(.*)("|')/g,func:'angular'},{regexp:/(ng-directive)=("|')(.*)("|')/g,func:'angular'},{regexp:/(ng-service)=("|')(.*)("|')/g,func:'angular'},
{regexp:/\{\{(.*)\|(.*)\}\}/g,func:'angularFilter'}]
var head='';
var body='';
var paths = [];
module.exports = function (app) {
    return function (req, res, next) {
        paths=[];
        utils.getAllFileInDirectory(layoutsPath,paths).forEach(function(filePath){
            createBem(filePath,layoutsPath,app);
        });
        paths=[];
        utils.getAllFileInDirectory(pagesPath,paths).forEach(function(filePath){
            createBem(filePath,pagesPath,app);
        });
        return next();
    };
};
var func = {
    /**
     * Replace class name and id on plex bem values.
     * @param arg - argumets on replace
     * @param options - params for create related less file
     * @returns {string} - new css style name
     */
    className: function(arg,options){
        var cleanRegexp = new RegExp(options.fileName+'--','g');
        var idents =  arg[0].match(/^\s/) ? arg[0].match(/^\s/)[0] : '';
        var ends = arg[0].match(/\s$/) ? arg[0].match(/\s$/)[0] : '';
        var cls = arg[4].replace(/b-/,'').replace(cleanRegexp,'');
        var fullCss = options.fileName ? arg[2]+arg[3]+'b-'+options.fileName+'--'+cls : arg[2]+arg[3]+'b-'+cls;
        var className = options.fileName ? arg[3]+'b-'+options.fileName+'--'+cls : arg[3]+'b-'+cls;
        /**
         * Create css style in related less file.
         */
        if(fs.existsSync(options.lessPath)){
            var file = fs.readFileSync(options.lessPath).toString();
            var cssRegexp = new RegExp(className,'g');
            if(!cssRegexp.test(file)){
                file+='\n'+className+'{\n\n}';
                console.log(className)
                utils.write(options.lessPath,file);
            }
        }
        return idents+fullCss+ends;
    },
    /**
     * Make a include to te LESS JS and View files
     * @param args - arguments of regexp
     * @param options
     * @returns {*}
     */
    include: function(args,options){
        var blockName = args[1];
        if(blockName=='components') {
            console.error('Your block cant called "components" like a components folder of parent block.');
            return false;
        }
        var app = options.app;
        var basePath = (viewsPath+options.currentPath).replace(/\/\//g,'/');
        var baseLessPath = (lessPath+options.currentPath).replace(/\/\//g,'/');
        var baseJavaScriptPath = (javaScriptPath+options.currentPath).replace(/\/\//g,'/');
        var createBlocksDir = !/blocks/g.test(basePath);
        var variousPath = '';
        var variousLessPath = '';
        var variousImport= '';
        var variousRequire= '';
        var includePath = '';
        var useGulp = app.get('useGulp');
        /**
         * Create blocks dir if we arond of base directory
         */
        if(createBlocksDir){
            if(!fs.existsSync(basePath+'/blocks'))utils.mkdir(basePath+'/blocks');
            if(!fs.existsSync(baseLessPath+'/blocks'))utils.mkdir(baseLessPath+'/blocks');
            if(!fs.existsSync(baseJavaScriptPath+'/blocks'))utils.mkdir(baseLessPath+'/blocks');
            variousPath = basePath+'/blocks/'+blockName;
            variousLessPath = baseLessPath+'/blocks/'+blockName;
            variousJavaScriptPath = baseJavaScriptPath+'/blocks/'+blockName;
            variousImport = useGulp ? '' :  '@import "blocks/'+blockName+'/'+blockName+'";';
            variousRequire = 'require("./blocks/'+blockName+'/'+blockName+'.js");'
            includePath = 'blocks/'+blockName+'/'+blockName;
        }else{
            variousPath = basePath+'/'+blockName;
            variousLessPath = baseLessPath+'/'+blockName;
            variousJavaScriptPath = baseJavaScriptPath+'/'+blockName;
            variousImport = useGulp ? '' :  '@import "'+blockName+'/'+blockName+'";';
            variousRequire =  'require("./'+blockName+'/'+blockName+'.js");';
            includePath = blockName+'/'+blockName;
        }
        /**
         * Write less imports
         */
        if(fs.existsSync(options.lessPath)){
            var file = fs.readFileSync(options.lessPath).toString();
            var lessRegexp = new RegExp(variousImport.replace(/\//g,'\\/').replace(/\"/g,'\\"'));
            if(!lessRegexp.test(file)){
                file+='\n'+variousImport;
                utils.write(options.lessPath,file);
            }
        }
        /**
         * Write JS require
         */
        if(fs.existsSync(options.javaScriptPath)){
            var file = fs.readFileSync(options.javaScriptPath).toString();
            var javaScriptRegexp = new RegExp(variousRequire.replace(/\//g,'\\/').replace(/\"/g,'\\"'));
            if(!javaScriptRegexp.test(file)){
                file+='\n'+variousRequire;
                utils.write(options.javaScriptPath,file);
            }
        }
        /**
         * Create block dirs
         */
        if(!fs.existsSync(variousPath))utils.mkdirSync(variousPath);
        if(!fs.existsSync(variousLessPath))utils.mkdirSync(variousLessPath);
        if(!fs.existsSync(variousJavaScriptPath))utils.mkdirSync(variousJavaScriptPath);
        /**
         * Create files
         */
        if(!fs.existsSync(variousPath+'/'+blockName+'.jade')) {
            try{
                utils.write(variousPath+'/'+blockName+'.jade','');
            }
            catch(e){
                console.log(e);
            }
        }
        /**
         * Less
         */
        if(!fs.existsSync(variousLessPath+'/'+blockName+'.less')) {
            try{
                utils.write(variousLessPath+'/'+blockName+'.less','');
            }
            catch(e){
                console.log(e);
            }
        }
        /**
         * JS
         */
        if(!fs.existsSync(variousJavaScriptPath+'/'+blockName+'.js')) {
            try{
                /**
                 * Write file
                 */
                utils.write(variousJavaScriptPath+'/'+blockName+'.js','');
                /**
                 * Create components of the module
                 */
                utils.mkdir(variousJavaScriptPath+'/components',function(err){
                    if(err) throw err;
                    utils.mkdir(variousJavaScriptPath+'/components/controllers');
                    utils.mkdir(variousJavaScriptPath+'/components/directives');
                    utils.mkdir(variousJavaScriptPath+'/components/filters');
                    utils.mkdir(variousJavaScriptPath+'/components/services');
                });
                /**
                 * Create a require in parent file
                 */
            }
            catch(e){
               console.log(e);
            }
        }
        return 'include '+includePath;
    },
    /**
     * Make a base ng- attr entitys like a controller or directive or other
     * @param args - arguments of regexp
     * @param options
     * @returns {*}
     */
    angular: function(args,options){
        var attr = args[1];
        var name = args[3];
        var entity = attr.replace(/\w+-/g,'');
        this.angularBase(options,name,entity);
        return this.returns[entity](args[0]);
    },
    /**
     * Angular filter files {{data.messge|filterName}} - create filterName.js
     * @param args
     * @param options
     * @returns {*}
     */
    angularFilter: function(args,options){
        var name = args[2];
        var entity = 'filter';
        this.angularBase(options,name,entity);
        return args[0];
    },
    /**
     * Base angualr function create entity files.
     * @param options
     * @param name
     * @param entity
     */
    angularBase: function(options,name,entity){
        /**
         * Create File
         */
        if(!fs.existsSync(options.javaScriptFolder+'components/'+entity+'s/'+name+'.js'))
            utils.copyTemplate('/'+entity+'.js',options.javaScriptFolder+'components/'+entity+'s/'+name+'.js',{name:name});
        /**
         * Include controller to base file
         */
        variousRequire =  'require("./components/'+entity+'s/'+name+'.js");';
        var file = fs.readFileSync(options.javaScriptPath).toString();
        var variousRegexpPath = 'require\\(\\"\\.\\/components\\/'+entity+'s\\/'+name+'\\.js\\"\\)';
        if(!new RegExp(variousRegexpPath).test(file)){
            utils.write(options.javaScriptPath,file+'\n'+variousRequire);
        }
    },
    /**
     * Replacement to the ng- attrs
     */
    returns: {
        controller: function(attr){
            return attr;
        },
        filter: function(attr){
            return attr;
        },
        directive: function(attr){
            var directive = attr.match(/("|')(.*)("|')/g)[0].replace(/("|')/g,'');
            return directive;
        },
        service: function(attr){
            var directive = attr.match(/("|')(.*)("|')/g)[0].replace(/("|')/g,'');
            return directive;
        }
    }
}
function createBem(filePath,destinationPath,app){
    var file = fs.readFileSync(filePath).toString();
    /**
     * Get paths
     */
    var segments = filePath.split('/');
    var fileName = segments[segments.length-1].split('.')[0];
    var path = '';
    for(var i=3;i<segments.length-1;i++) path+='/'+segments[i];
    var less = (lessPath+path+'/'+fileName+'.less').replace(/\/\//g,'/');
    var java = (javaScriptPath+path+'/'+fileName+'.js').replace(/\/\//g,'/');
    var javaFolder = (javaScriptPath+path+'/').replace(/\/\//g,'/');
    var jadeDirPath = viewsPath+path;
    /**
     * Check on adding name to class,id and other
     */
    var testMainDir = new RegExp(destinationPath.replace(/\//g,'\\/')+'\\/.*\\/.*\\/'+fileName);
    var addName = testMainDir.test(filePath);
    /**
     * Get Body and make bem. Replace all className,ID,Includes. Create bem hierarchy.
     */
    var splitBody = file.split('body');
    var bodyIndent = file.match(/body/g);
    var current =  splitBody[1] ?  splitBody[1] : file;
    var changes = false;
    actionRegExp.forEach(function(action){
        current=current.replace(action.regexp,function(){
            changes = true;
            return func[action.func](arguments,{
                fileName:addName ? fileName : false,
                lessPath:less,
                currentPath: path,
                javaScriptPath:java,
                javaScriptFolder:javaFolder,
                app: app
            });
        });
    });
    if(changes) utils.write(filePath,splitBody[1] ? splitBody[0]+bodyIndent+current : current);
}
