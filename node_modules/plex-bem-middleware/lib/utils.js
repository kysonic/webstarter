var mkdirp = require('mkdirp');
var fs = require('fs');
var path = require('path');
module.exports = {
    /**
     * Create dir with mkdirp
     * @param path
     * @param callback
     */
    mkdir: function (path, callback) {
        mkdirp(path, 0755, function (err) {
            if (err) throw err;
            console.log('   \033[36mcreate\033[0m : ' + path);
            callback && callback();
        });
    },
    mkdirSync: function(path){
        mkdirp.sync(path,0755);
    },
    /**
     * Delete this directory recursive
     * @param path
     */
    deleteFolderRecursive: function (path) {
        var files = [];
        var self = this;
        if (fs.existsSync(path)) {
            files = fs.readdirSync(path);
            files.forEach(function (file, index) {
                var curPath = path + "/" + file;
                if (fs.lstatSync(curPath).isDirectory()) { // recurse
                    self.deleteFolderRecursive(curPath);
                } else { // delete file
                    fs.unlinkSync(curPath);
                }
            });
            fs.rmdirSync(path);
        }
    },
    /**
     * Delete all files and folders in this directory
     * @param path
     */
    deleteFolderInnerRecursive: function (path) {
        var files = [];
        var self = this;
        if (fs.existsSync(path)) {
            files = fs.readdirSync(path);
            files.forEach(function (file, index) {
                var curPath = path + "/" + file;
                if (fs.lstatSync(curPath).isDirectory()) {
                    self.deleteFolderInnerRecursive(curPath);
                    fs.rmdirSync(curPath);
                } else {
                    fs.unlinkSync(curPath);
                }
            });
        }
    },
    deleteFilesInDir: function (path) {
        var files = [];
        var self = this;
        if (fs.existsSync(path)) {
            files = fs.readdirSync(path);
            files.forEach(function (file, index) {
                var curPath = path + "/" + file;
                if (!fs.lstatSync(curPath).isDirectory() && !/variables/.test(file)) fs.unlinkSync(curPath);
            });
        }
    },
    getAllFileInDirectory: function(path,paths){
        var files = [];
        var self = this;
        if (fs.existsSync(path)) {
            files = fs.readdirSync(path);
            files.forEach(function (file, index) {
                var curPath = path + "/" + file;
                if(fs.lstatSync(curPath).isDirectory()) self.getAllFileInDirectory(curPath,paths);
                else paths.push(curPath);
            });
        }
        return this.sortArrayPathsOnDeep(paths);
    },
    sortArrayPathsOnDeep: function(paths){
        var self = this;
        return paths.sort(function(a,b){
            return self.getCharCount(a,'/') - self.getCharCount(b,'/');
        });
    },
    getCharCount: function(str,char){
        return str.split(char).length-1;
    },
    write: function (path, str, mode) {
        fs.writeFileSync(path, str, { mode: mode || 0666 });
        console.log('   \x1b[36mcreate\x1b[0m : ' + path);
    },
    tplMaster: {
        tpl: '',
        figures: {},
        execute: function (figures) {
            this.figures = figures;
            var html = this.tpl;
            for (var key in figures) {
                if (figures[key]) {
                    html = html.replace(new RegExp('{{' + key + '}}', 'ig'), figures[key]);
                }
                else {
                    html = html.replace(new RegExp('{{' + key + '}}', 'ig'), '');
                }
            }
            return html;
        }
    },
    copyTemplate: function (from, to, figures) {
        from = path.join(__dirname, '..', 'templates', from);
        var html = '';
        if (figures && figures != undefined) {
            this.tplMaster.tpl = fs.readFileSync(from, 'utf-8').toString();
            html = this.tplMaster.execute(figures);
        } else {
            html = fs.readFileSync(from, 'utf-8').toString();
        }
        console.log(to,html);
        this.write(to, html);
    },
    abort: function (msg) {
        console.log(msg);
        process.exit(1);
    },
    inArray: function(array,value){
        var inArray=false;
        array.forEach(function(item){
           if(item==value) inArray = true;
        });
        return inArray;
    }
}
